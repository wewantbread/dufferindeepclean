/* Google Font */
@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Inter:wght@400;700&display=swap');

/* Global Reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  animation-fill-mode: both;
}

/* Remove all underlines globally */
a { text-decoration: none !important; }
a:hover { text-decoration: none !important; }
a:visited { color: #00d4ff; text-decoration: none !important; }
a:link { text-decoration: none !important; }

/* ===== Sitewide background to MATCH book.html ===== */
html, body { height: -webkit-fill-available; min-height: 100%; }

body {
  font-family: 'Inter', sans-serif;
  color: white;
  min-height: 100vh;
  background-color: #000;

  /* REMOVE old animated grid completely */
  background-image: none !important;
  animation: none !important;

  /* ADD the same background as book.html */
  background-image: url('backgroundbook.png') !important;
  background-size: cover !important;
  background-position: center !important;
  background-attachment: fixed !important;
  background-repeat: no-repeat !important;
}

/* Readability overlay (same as book.html) */
body::before {
  content: "";
  position: fixed;
  inset: 0;
  background: radial-gradient(1200px 600px at 50% -10%, rgba(0,0,0,0.45), rgba(0,0,0,0.7) 60%, rgba(0,0,0,0.85));
  pointer-events: none;
  z-index: -1;
}

/* Typography */
h1, h2, h3 {
  font-family: 'Bebas Neue', sans-serif;
  letter-spacing: 1px;
  text-transform: lowercase;
}

/* Navigation Bar */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5em 3em;
  background: linear-gradient(to right, #000, #111);
  position: sticky;
  top: 0;
  z-index: 1000;
}

/* Logo with soap and sparkle */
.logo {
  display: flex;
  align-items: center;
  font-size: 2rem;
  font-weight: bold;
  color: #00d4ff;
  animation: fadeInUp 0.4s ease forwards;
  transform: translateY(-10px);
  opacity: 0;
  animation-delay: 0.2s;
  position: relative;
}
.logo .soap {
  font-size: 2.5rem;
  margin-right: 0.5rem;
  transform: scale(1.1);
  opacity: 1;
  animation: popIn 1.2s ease;
  animation-delay: 0.2s;
  animation-fill-mode: backwards;
  position: relative;
}
.logo .soap::after {
  content: 'âœ¨';
  position: absolute;
  font-size: 0.9rem;
  top: -10px;
  right: -8px;
  animation: sparkle 1.2s ease-in-out infinite;
  color: #fff;
  opacity: 0.8;
}
.logo-text {
  font-size: 1.8rem;
  text-transform: lowercase;
  letter-spacing: 1px;
  animation: fadeInUp 0.1s ease forwards;
  opacity: 0;
  animation-delay: 0.3s;
}

@keyframes popIn {
  0% { transform: scale(0.5) rotate(-30deg); opacity: 0; }
  60% { transform: scale(1.3) rotate(10deg); opacity: 1; }
  100% { transform: scale(1.1) rotate(0deg); }
}
@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(10px); }
  to   { opacity: 1; transform: translateY(0); }
}
@keyframes sparkle {
  0%, 100% { opacity: 0.8; transform: scale(1) rotate(0deg); }
  50%      { opacity: 1;   transform: scale(1.2) rotate(20deg); }
}

/* Nav Links */
.nav-links a {
  margin-left: 2rem;
  text-decoration: none !important;
  color: #eee;
  font-size: 1rem;
  position: relative;
  transition: color 0.3s ease;
}
.nav-links a:hover { color: #00d4ff; text-decoration: none !important; }

/* Split Layout (Desktop) */
.split-screen {
  display: flex;
  height: 90vh;
  width: 100%;
  position: relative;
  z-index: 1;
}

/* LEFT panel: remove grid background here too */
.text-side {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding: 4em;

  /* kill previous grid bg + animation */
  background: transparent !important;
  background-image: none !important;
  animation: none !important;
}
.image-side {
  flex: 1;
  overflow: hidden;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  position: relative;
  z-index: 1;
}
.image-side::after {
  content: "";
  position: absolute;
  left: 0; top: 0;
  height: 100%; width: 120px;
  background: linear-gradient(to right, black, transparent);
  z-index: 2; pointer-events: none;
}
.image-side img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  position: relative;
  z-index: 0;
  transform: translateX(-40px);
}

/* Headline */
.headline {
  font-size: 3rem;
  font-weight: 800;
  line-height: 1.2;
}
.headline span {
  display: inline-block;
  animation: fadeIn 1s ease forwards;
  opacity: 0;
}
.headline span:nth-child(1) { animation-delay: 0.3s; }
.headline span:nth-child(2) { animation-delay: 0.6s; }
.headline span:nth-child(3) { animation-delay: 0.9s; }
.headline span:nth-child(4) { animation-delay: 1.2s; }
.headline-image {
  height: 1em; width: auto; display: inline-block;
  margin-left: 0.5rem; vertical-align: baseline;
  animation: fadeIn 1s ease forwards; opacity: 0; animation-delay: 1.5s;
}

/* Subtext */
.subtext {
  font-size: 1.1rem;
  margin-top: 2rem;
  color: #ccc;
  max-width: 500px;
}

/* Fade-in for headline */
@keyframes fadeIn { to { opacity: 1; transform: translateY(0); } }

/* Quote Button Under Headline */
.quote-btn-home {
  margin-top: 3rem;
  padding: 0.8em 2em;
  background: #00d4ff;
  color: black !important;
  font-weight: bold;
  border: none;
  border-radius: 14px;
  text-decoration: none !important;
  font-size: 1.5rem;
  cursor: pointer;
  align-self: flex-start;
  animation: fadeInUp 1.5s ease forwards;
  opacity: 0;
  transform: translateY(20px);
  transition: background 0.3s ease, transform 0.3s ease;
}
.quote-btn-home:hover { background: white; color: black !important; }
.quote-btn-home:visited { color: black !important; }
.quote-btn-home:link    { color: black !important; }

/* Services Button Under Quote Button (desktop/mobile default) */
.services-btn-home {
  margin-top: 1.5rem;
  padding: 0.8em 2em;
  background: transparent;
  color: #00d4ff;
  font-weight: bold;
  border: 2px solid #00d4ff;
  border-radius: 50px;
  text-decoration: none;
  font-size: 1.2rem;
  cursor: pointer;
  align-self: flex-start;
  animation: fadeInUp 1.8s ease forwards;
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.3s ease;
  text-transform: lowercase;
}
.services-btn-home:hover {
  background: #00d4ff;
  color: black;
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(0, 212, 255, 0.3);
}

/* Services Page Styles */
.services-page { min-height: 100vh; padding: 2em 0; }
.services-header { text-align: center; padding: 3em 2em 1em; }
.services-header h1 {
  font-size: 3.5rem; color: #00d4ff; margin-bottom: 1rem; animation: fadeInUp 0.8s ease forwards;
}
.services-header p {
  font-size: 1.2rem; color: #ccc; max-width: 600px; margin: 0 auto;
  animation: fadeInUp 1s ease forwards; animation-delay: 0.2s; opacity: 0;
}
.services-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2rem;
  padding: 2em 2em;
  max-width: 1000px;
  margin: 0 auto;
}
.service-card {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 20px;
  padding: 1.5rem;
  text-align: center;
  transition: all 0.4s ease;
  border: 2px solid transparent;
  position: relative;
  overflow: hidden;
  animation: fadeInUp 1s ease forwards;
  opacity: 0;
}
.service-card:nth-child(1) { animation-delay: 0.3s; }
.service-card:nth-child(2) { animation-delay: 0.5s; }
.service-card:nth-child(3) { animation-delay: 0.7s; }
.service-card::before {
  content: '';
  position: absolute; top: 0; left: -100%;
  width: 100%; height: 100%;
  background: linear-gradient(90deg, transparent, rgba(0, 212, 255, 0.1), transparent);
  transition: left 0.5s ease;
}
.service-card:hover::before { left: 100%; }
.service-card:hover {
  transform: translateY(-10px);
  border-color: #00d4ff;
  box-shadow: 0 20px 40px rgba(0, 212, 255, 0.2);
  background: rgba(0, 212, 255, 0.1);
}
.service-image {
  width: 180px; height: 180px; object-fit: cover;
  margin-bottom: 1rem; border-radius: 15px; transition: transform 0.3s ease;
}
.service-card:hover .service-image { transform: scale(1.05); }
.service-card h3 {
  font-size: 2rem; color: #00d4ff; margin-bottom: 1rem; transition: color 0.3s ease;
}
.service-card:hover h3 { color: white; }
.service-card p {
  color: #ccc; line-height: 1.6; font-size: 1rem; transition: color 0.3s ease;
}
.service-card:hover p { color: white; }

/* Quote Page Section (unchanged) */
.quote-form-section {
  padding: 4em 2em;
  background: linear-gradient(to bottom, #000, #333);
  color: white;
  text-align: center;
}
.quote-form-section h1 { font-size: 2.5rem; margin-bottom: 2rem; color: #00d4ff; }
.quote-form { max-width: 600px; margin: 0 auto; text-align: left; }
.quote-form label { display: block; margin-top: 1.5rem; font-weight: bold; }
.quote-form input, .quote-form textarea, .quote-form select {
  width: 100%; padding: 0.8em; margin-top: 0.5rem; border: none; border-radius: 6px; background: #222; color: white;
}
.quote-form button {
  margin-top: 2rem; padding: 0.8em 2em; background: #00d4ff; color: black;
  font-weight: bold; border: none; border-radius: 8px; cursor: pointer; transition: background 0.3s ease;
}
.quote-form button:hover { background: white; }

/* Responsive Design */
@media (max-width: 768px) {
  .split-screen { flex-direction: column; height: auto; }
  .text-side, .image-side { flex: none; }
  .headline { font-size: 2.5rem; }
  .services-grid { grid-template-columns: 1fr; padding: 2em 1em; }
  .service-image { width: 150px; height: 150px; }
  .navbar { padding: 1em 2em; }
  .logo { font-size: 1.5rem; }
}

/* Orbital background utility (unused) */
.orbital-grid { position: relative; overflow: hidden; background-color: black; }
.orbital-grid::before {
  content: "";
  position: absolute; top: -50%; left: -50%;
  width: 200%; height: 200%;
  background: repeating-radial-gradient(
    circle,
    rgba(255, 165, 0, 0.2) 0px,
    rgba(0, 212, 255, 0.2) 1px,
    transparent 2px,
    transparent 20px
  );
  animation: rotateGrid 60s linear infinite;
  z-index: 0; pointer-events: none;
}
@keyframes rotateGrid { 0% { transform: rotate(0deg);} 100% { transform: rotate(360deg);} }
#services-grid { scroll-margin-top: 80px; }

/* =========================
   iOS-ONLY HERO TWEAKS
   ========================= */
html.ios .split-screen { flex-direction: column; height: auto; }
html.ios .image-side { display: none !important; }

html.ios .text-side {
  background: url('cleanuptransformation.jpg') center center / cover no-repeat;
  min-height: 100svh;
  padding: 4em 1.5em calc(1.5em + env(safe-area-inset-bottom));
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  border-radius: 20px;
  overflow: hidden;

  /* turn off any panel animations (none now, but keep safeguard) */
  animation: none !important;
  background-color: transparent;
  position: relative;
}

/* LIGHT top gradient so black text reads over bright areas */
html.ios .text-side::before {
  content: "";
  position: absolute;
  inset: 0 0 auto 0;
  height: 35%;
  background: linear-gradient(to bottom, rgba(255,255,255,.9), rgba(255,255,255,0));
  z-index: 1;
  pointer-events: none;
}

/* Bigger, bolder, BLACK text on iOS hero */
html.ios .headline {
  font-size: 3rem;
  line-height: 1.15;
  font-weight: 900;
  color: #000;
  position: relative;
  z-index: 2;
}
html.ios .subtext {
  font-size: 1.3rem;
  font-weight: 700;
  color: #000;
  max-width: 30ch;
  position: relative;
  z-index: 2;
}
html.ios .headline,
html.ios .subtext { text-shadow: 0 2px 4px rgba(255,255,255,.65); }

/* iOS buttons style */
html.ios .quote-btn-home,
html.ios .services-btn-home {
  background: #00ff88 !important;
  color: #000 !important;
  border: none;
  border-radius: 14px;
  font-weight: 800;
  font-size: 1.5rem;
  padding: 0.8em 2em;
  text-transform: lowercase;
  transition: background .3s ease, transform .3s ease;
  position: relative;
  z-index: 2;
}
html.ios .quote-btn-home:hover,
html.ios .services-btn-home:hover {
  background: #00cc6d !important;
  transform: translateY(-2px);
}

/* Keep navbar above everything on iOS */
html.ios .navbar { z-index: 1003; }

/* =========================
   Static announcement bar
   ========================= */
.announcement {
  width: 100%;
  background: #000;
  border-bottom: 1px solid rgba(255,255,255,0.1);
  padding: 0.9rem 1.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
}
.announcement-inner {
  width: 100%;
  max-width: 1200px;
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 1rem 1.5rem;
  align-items: center;
}
.announce-line {
  color: #f2f2f2;
  font-size: 1rem;
  line-height: 1.35;
  opacity: 0.95;
  grid-column: 1 / 2;
  margin: 0;
}
.announcement-cta {
  grid-column: 2 / 3;
  justify-self: end;
  display: inline-block;
  padding: 0.55em 1.2em;
  font-weight: 800;
  font-size: 0.98rem;
  line-height: 1;
  border-radius: 12px;
  background: #00d4ff;
  color: #000 !important;
  border: 2px solid transparent;
  transition: background .2s ease, transform .2s ease;
}
.announcement-cta:hover { background: #ffffff; transform: translateY(-1px); }

@media (max-width: 768px) {
  .announcement-inner { grid-template-columns: 1fr; }
  .announcement-cta { justify-self: start; }
}

/* iOS-only: light bar + green button + black text */
html.ios .announcement {
  background: #f6f7f8;
  border-bottom: 1px solid rgba(0,0,0,0.1);
}
html.ios .announce-line { color: #000 !important; }
html.ios .announcement-cta {
  background: #00ff88 !important;
  color: #000 !important;
}
html.ios .announcement-cta:hover { background: #00cc6d !important; }
/* --- kill hero grid on index (left panel) --- */
#home.split-screen .text-side,
.split-screen .text-side {
  background: transparent !important;
  background-image: none !important;
  animation: none !important; /* stops cyberGrid */
}
/* === Global: seamless tiling with smaller icons + infinite loop === */
:root{
  --bg-tile: url('backgroundbook.png');   /* or your seamless pattern */
  --tile-w: 640px;                        /* native tile width  */
  --tile-h: 320px;                        /* native tile height */
  --tile-scale: 0.55;                     /* â†“ make icons smaller (0.4â€“0.7) */

  /* Derived size (donâ€™t touch) */
  --tile-w-sized: calc(var(--tile-w) * var(--tile-scale));
  --tile-h-sized: calc(var(--tile-h) * var(--tile-scale));
}

body { background: #000 !important; }

/* two layers, offset; move by exactly one tile for a perfect loop */
body::before{
  content:"";
  position:fixed; inset:0; z-index:-1; pointer-events:none;

  background-image: var(--bg-tile), var(--bg-tile);
  background-repeat: repeat, repeat;
  background-size: var(--tile-w-sized) var(--tile-h-sized), var(--tile-w-sized) var(--tile-h-sized);
  background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2);

  animation: bg-a 60s linear infinite, bg-b 90s linear infinite;

  /* keep text readable (same feel as book) */
  box-shadow: inset 0 -200vmax 0 rgba(0,0,0,.6);
}

/* seamless loops (end == start modulo one tile) */
@keyframes bg-a {
  from { background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
  to   { background-position: var(--tile-w-sized) var(--tile-h-sized),
                        calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
}
@keyframes bg-b {
  from { background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
  to   { background-position: 0 0,
                        calc(var(--tile-w-sized)*1.5) calc(var(--tile-h-sized)*1.5); }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce){
  body::before{ animation:none; }
}
/* ==== Infinite tiling background (diagonal loop) + readable overlay ==== */
:root{
  /* Use the seamless pattern you like */
  --bg-tile: url('backgroundbook.png');    /* swap to your mini-supplies tile if that's the seamless one */
  --tile-w: 640px;                         /* set to the tile's native pixels */
  --tile-h: 320px;                         /* set to the tile's native pixels */
  --tile-scale: 0.85;                      /* 0.85 ~= medium size. Raise to 0.95 if still too small */
  --tile-w-sized: calc(var(--tile-w) * var(--tile-scale));
  --tile-h-sized: calc(var(--tile-h) * var(--tile-scale));
}

/* Kill any static cover backgrounds so animation is visible everywhere */
body{
  background-image: none !important;
  background-color: #000;
}

/* Keep your existing dark overlay (use ::before) */
body::before{
  content:"";
  position: fixed;
  inset: 0;
  z-index: -1;
  pointer-events: none;
  background: radial-gradient(1200px 600px at 50% -10%,
              rgba(0,0,0,0.45), rgba(0,0,0,0.7) 60%, rgba(0,0,0,0.85));
}

/* NEW: animated tiling pattern (put it *behind* the overlay) */
body::after{
  content:"";
  position: fixed;
  inset: 0;
  z-index: -2;             /* sits under ::before overlay, above body background */
  pointer-events: none;

  /* Two layers, offset and looped */
  background-image: var(--bg-tile), var(--bg-tile);
  background-repeat: repeat, repeat;
  background-size: var(--tile-w-sized) var(--tile-h-sized), var(--tile-w-sized) var(--tile-h-sized);
  background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2);

  /* Move by exactly one tile â†’ perfect seamless loop */
  animation:
    bgA 38s linear infinite,
    bgB 62s linear infinite;
}

/* Diagonal loops */
@keyframes bgA {
  from { background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
  to   { background-position: var(--tile-w-sized) var(--tile-h-sized),
                           calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
}
@keyframes bgB {
  from { background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
  to   { background-position: 0 0,
                           calc(var(--tile-w-sized)*1.5) calc(var(--tile-h-sized)*1.5); }
}

/* Respect reduced motion */
@media (prefers-reduced-motion: reduce){
  body::after{ animation: none; }
}

/* Ensure the hero left panel never reinstates the old grid */
.split-screen .text-side { background: transparent !important; background-image: none !important; animation: none !important; }
/* === Infinite tiling background (fixed) === */
:root{
  /* POINT THIS TO YOUR REAL TILE */
  --bg-tile: url('backgroundbook.png');  /* change if it's in /assets/bg/... */
  --tile-w: 640px;   /* set to the tile's native size */
  --tile-h: 320px;
  --tile-scale: 0.90;  /* bump up/down to change icon size */

  --tile-w-sized: calc(var(--tile-w) * var(--tile-scale));
  --tile-h-sized: calc(var(--tile-h) * var(--tile-scale));
}

/* Put the solid black on <html>, keep <body> transparent so layers show */
html { background-color: #000; }
body {
  position: relative;             /* create stacking context */
  background: transparent !important;   /* don't cover the animation */
}

/* Dark readability overlay (ON TOP of the animation) */
body::before{
  content:"";
  position: fixed;
  inset: 0;
  z-index: 1;                     /* overlay sits above animation */
  pointer-events: none;
  background: radial-gradient(1200px 600px at 50% -10%,
              rgba(0,0,0,0.45), rgba(0,0,0,0.7) 60%, rgba(0,0,0,0.85));
}

/* Animated tiling pattern (BEHIND overlay, IN FRONT of html bg) */
body::after{
  content:"";
  position: fixed;
  inset: 0;
  z-index: 0;                     /* visible under overlay */
  pointer-events: none;

  background-image: var(--bg-tile), var(--bg-tile);
  background-repeat: repeat, repeat;
  background-size: var(--tile-w-sized) var(--tile-h-sized), var(--tile-w-sized) var(--tile-h-sized);
  background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2);

  animation: bgA 38s linear infinite, bgB 62s linear infinite;
}

/* Seamless diagonal loops (move by exactly one tile) */
@keyframes bgA {
  from { background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
  to   { background-position: var(--tile-w-sized) var(--tile-h-sized),
                           calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
}
@keyframes bgB {
  from { background-position: 0 0, calc(var(--tile-w-sized)/2) calc(var(--tile-h-sized)/2); }
  to   { background-position: 0 0,
                           calc(var(--tile-w-sized)*1.5) calc(var(--tile-h-sized)*1.5); }
}

/* Make sure the hero left panel never brings the old grid back */
.split-screen .text-side { background: transparent !important; background-image: none !important; animation: none !important; }

/* Accessibility */
@media (prefers-reduced-motion: reduce){ body::after{ animation: none; } }
